{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.set = set;\nexports.get = get;\nexports.serialize = serialize;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _objectAssign = require('object-assign');\n\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\n\nvar _deepFreeze = require('deep-freeze');\n\nvar _deepFreeze2 = _interopRequireDefault(_deepFreeze);\n\nvar _serializeJavascript = require('serialize-javascript');\n\nvar _serializeJavascript2 = _interopRequireDefault(_serializeJavascript);\n\nvar configuration = null;\nvar setOptions = {};\nvar validOptions = ['freeze', 'assign'];\nvar persistentOptions = ['freeze'];\n\nfunction set(newConfiguration) {\n  var newOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  if (configuration && setOptions.freeze !== false) {\n    throw new Error('react-global-configuration - Configuration is already set, the initial call should have \\'freeze\\' set to false to allow for this behaviour (e.g. in testing');\n  }\n\n  if (newOptions) {\n    for (var newOption in newOptions) {\n      //Check if is a valid option\n      if (validOptions.indexOf(newOption) !== -1) {\n        //Check value of option\n        var value = newOptions[newOption];\n\n        if (typeof value !== 'boolean') {\n          throw new Error('react-global-configuration - Unexpected value type for ' + newOption + ' : ' + typeof value + ', boolean expected');\n        }\n\n        if (persistentOptions.indexOf(newOption) !== -1) {\n          setOptions[newOption] = value;\n        }\n      } else {\n        throw new Error('react-global-configuration - Unrecognised option \\'' + newOption + '\\' passed to set');\n      }\n    }\n  }\n\n  if (newOptions.assign) {\n    configuration = (0, _objectAssign2['default'])(configuration, newConfiguration);\n  } else {\n    configuration = newConfiguration;\n  }\n\n  if (setOptions.freeze !== false && Object.freeze && Object.getOwnPropertyNames) {\n    configuration = (0, _deepFreeze2['default'])(configuration);\n  } else if (!Object.freeze || !Object.getOwnPropertyNames) {\n    sayWarning('react-global-configuration - Could not call freeze as native functions arent\\'t available');\n  }\n}\n\nfunction get(key, fallbackValue) {\n  if (!configuration) {\n    sayWarning('react-global-configuration - Configuration has not been set.');\n  }\n\n  if (fallbackValue === undefined) {\n    fallbackValue = null;\n  }\n\n  var value = fetchFromObject(configuration, key); //Fix to return null values\n\n  if (value !== undefined) {\n    return value;\n  }\n\n  if (key !== undefined) {\n    value = fallbackValue;\n  } else {\n    sayWarning('react-global-configuration - There is no value with the key: ' + key);\n    value = configuration;\n  }\n\n  return value;\n}\n\nfunction serialize() {\n  return (0, _serializeJavascript2['default'])(configuration);\n}\n/* **************************** */\n\n/* Helpers\n/* **************************** */\n\n\nfunction fetchFromObject(_x2, _x3) {\n  var _again = true;\n\n  _function: while (_again) {\n    var obj = _x2,\n        key = _x3;\n    _again = false;\n    key = key !== undefined ? key : '';\n\n    if (typeof obj === 'undefined') {\n      return undefined;\n    }\n\n    var index = key.indexOf('.');\n\n    if (index > -1) {\n      _x2 = obj[key.substring(0, index)];\n      _x3 = key.substr(index + 1);\n      _again = true;\n      index = undefined;\n      continue _function;\n    }\n\n    return obj[key];\n  }\n}\n\nfunction sayWarning(text) {\n  if (process.env.NODE_ENV === 'development') {\n    void 0;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}