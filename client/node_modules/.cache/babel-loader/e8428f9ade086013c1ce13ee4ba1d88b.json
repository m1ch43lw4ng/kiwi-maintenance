{"ast":null,"code":"import _classCallCheck from \"/Users/gnawleahcim/Documents/kiwi-maintenance/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gnawleahcim/Documents/kiwi-maintenance/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gnawleahcim/Documents/kiwi-maintenance/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gnawleahcim/Documents/kiwi-maintenance/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gnawleahcim/Documents/kiwi-maintenance/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gnawleahcim/Documents/kiwi-maintenance/client/src/pages/Chart.js\";\nimport React, { Component } from 'react';\nimport SplitPane from 'react-split-pane';\nimport Iframe from 'react-iframe';\nimport '../index.css';\nimport Airtable from 'airtable';\nimport config from '../config.js';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport moment from \"moment-timezone\";\nimport { // eslint-disable-next-line\nBrowserView, // eslint-disable-next-line\nMobileView, // eslint-disable-next-line\nisBrowser, isMobile } from \"react-device-detect\";\nvar base = new Airtable({\n  apiKey: config.get('apiKey')\n}).base(config.get('baseID'));\nvar linkUrl = \"https://airtable.com/embed/\" + config.get('url') + \"?backgroundColor=purple\";\nvar SearchBar = Search.SearchBar,\n    ClearSearchButton = Search.ClearSearchButton;\nvar columns = [{\n  dataField: 'KiwibotID',\n  text: 'Bot #',\n  sort: true,\n  headerStyle: function headerStyle(colum, colIndex) {\n    return {\n      width: '90px',\n      textAlign: 'center'\n    };\n  }\n}, {\n  dataField: 'Status',\n  text: 'Status',\n  sort: true,\n  headerStyle: function headerStyle(colum, colIndex) {\n    return {\n      width: '110px',\n      textAlign: 'center'\n    };\n  },\n  classes: function callback(cell, row, rowIndex, colIndex) {\n    \"border-box truncate pill px1 cellToken choiceToken line-height-4 fit mr-half flex-none redBright print-color-exact text-white\";\n  }\n}, {\n  dataField: 'Symtoms/Diagnostic',\n  text: 'Diagnostic',\n  sort: true\n}, {\n  dataField: 'Accountable',\n  text: 'Accountable',\n  sort: true,\n  headerStyle: function headerStyle(colum, colIndex) {\n    return {\n      width: '150px',\n      textAlign: 'center'\n    };\n  }\n}, {\n  dataField: 'Last Updated',\n  text: 'Last Updated',\n  sort: true,\n  headerStyle: function headerStyle(colum, colIndex) {\n    return {\n      width: '190px',\n      textAlign: 'center'\n    };\n  }\n}, {\n  dataField: 'Problem',\n  text: 'Problems',\n  headerStyle: function headerStyle(colum, colIndex) {\n    return {\n      width: '110px',\n      textAlign: 'center'\n    };\n  }\n}];\nvar defaultSorted = [{\n  dataField: 'KiwibotID',\n  order: 'asc'\n}];\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  function Chart(props) {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));\n    _this.state = {\n      botxreg: [],\n      maxRegID: 0,\n      newUpdates: []\n    };\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"refresh\",\n    value: function refresh() {\n      var _this2 = this;\n\n      /**\n       * Iterates through the old records that will be replaced by the updates added during\n       * the previous refresh, and updates all of them to match the new updates (regxnovedades).\n       * */\n      this.state.newUpdates.forEach(function (newRecord) {\n        var botID = newRecord[\"fields\"][\"KiwibotID\"];\n        base('BOTXREG1').select({\n          view: 'Grid view',\n          filterByFormula: 'KiwibotID = ' + botID\n        }).eachPage(function (records, fetchNextPage) {\n          records.forEach(function (record) {\n            /**\n             * The updating step\n             * */\n            base('BOTXREG1').update(record[\"id\"], {\n              \"KiwibotID\": newRecord[\"fields\"][\"KiwibotID\"],\n              \"Status\": newRecord[\"fields\"][\"Status\"],\n              \"Symtoms/Diagnostic\": newRecord[\"fields\"][\"Symtoms/Diagnostic\"],\n              \"Last Updated\": newRecord[\"fields\"][\"Last Updated\"],\n              \"Accountable\": newRecord[\"fields\"][\"Accountable\"],\n              \"PROBLEMS\": newRecord[\"fields\"][\"Problem\"],\n              \"Active Trigger\": newRecord[\"fields\"][\"ActiveTrigger\"]\n            }, function (err) {\n              if (err) {\n                console.error(err);\n                return;\n              }\n            });\n          });\n          fetchNextPage();\n        });\n      });\n      /**\n       * Sets the next iteration of newUpdates and maxRegID (state will update by next refresh)\n       * */\n\n      this.setState({\n        newUpdates: []\n      });\n      base('REGXNOVEDADES').select({\n        view: 'General',\n        filterByFormula: 'REGID >= ' + this.state.maxRegID\n      }).eachPage(function (records, fetchNextPage) {\n        records.forEach(function (record) {\n          _this2.state.newUpdates.push(record);\n\n          _this2.setState({\n            maxRegID: record[\"fields\"][\"REGID\"]\n          });\n        });\n        fetchNextPage();\n      });\n      /**\n       * Regenerates the table : ONLY WORKS FOR <= 100 ROBOTS\n       * */\n\n      base('BOTXREG1').select({\n        view: 'Grid view'\n      }).eachPage(function (records) {\n        _this2.setState({\n          botxreg: records\n        });\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this3 = this;\n\n      /**\n       * Current code only works for each airtable \"page\" (100 elements)\n       *\n       * For more, would have to use:\n       *\n       .eachPage(\n           (records, fetchNextPage) => {\n               records.forEach((record) => {\n                  this.state.botxreg.push(record)\n               });\n               fetchNextPage();\n           }\n       );\n       *\n       * */\n      base('BOTXREG1').select({\n        view: 'Grid view'\n      }).eachPage(function (records) {\n        _this3.setState({\n          botxreg: records\n        });\n      });\n      base('REGXNOVEDADES').select({\n        view: 'General',\n        filterByFormula: 'REGID > 410'\n      }).eachPage(function (records, fetchNextPage) {\n        _this3.setState({\n          maxRegID: records[records.length - 1][\"fields\"][\"REGID\"]\n        });\n\n        fetchNextPage();\n      });\n      console.log(this.state.maxRegID);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this4 = this;\n\n      /** Initializes an interval counter to refresh every timeout milliseconds*/\n      setInterval(function () {\n        return _this4.refresh();\n      }, 15000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (isMobile) {\n        return React.createElement(Iframe, {\n          url: linkUrl,\n          width: \"100%\",\n          height: \"800\",\n          id: \"myId\",\n          className: \"airtable-embed\",\n          display: \"initial\",\n          position: \"relative\",\n          allowFullScreen: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(SplitPane, {\n          split: \"vertical\",\n          minSize: 800,\n          maxSize: 1200,\n          defaultSize: 1000,\n          allowResize: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"table-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, React.createElement(ToolkitProvider, {\n          boostrap4: true,\n          search: true,\n          keyField: \"id\",\n          data: this.state.botxreg.map(function (record) {\n            return RowData(record);\n          }),\n          columns: columns,\n          defaultSorted: defaultSorted,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }, function (props) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 224\n            },\n            __self: this\n          }, React.createElement(\"small\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 225\n            },\n            __self: this\n          }, \"\\xA0\"), React.createElement(\"h2\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 226\n            },\n            __self: this\n          }, React.createElement(\"strong\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 226\n            },\n            __self: this\n          }, \"Kiwibot Maintenance Registry\")), React.createElement(\"small\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 227\n            },\n            __self: this\n          }, \"\\xA0\"), React.createElement(SearchBar, Object.assign({}, props.searchProps, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 229\n            },\n            __self: this\n          })), React.createElement(ClearSearchButton, Object.assign({}, props.searchProps, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 230\n            },\n            __self: this\n          })), React.createElement(\"hr\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 232\n            },\n            __self: this\n          }), React.createElement(BootstrapTable, Object.assign({}, props.baseProps, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 233\n            },\n            __self: this\n          })));\n        })), React.createElement(\"div\", {\n          className: \"overlay\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }, React.createElement(Iframe, {\n          url: linkUrl,\n          width: \"100%\",\n          height: \"800\",\n          id: \"myId\",\n          className: \"airtable-embed\",\n          display: \"initial\",\n          position: \"relative\",\n          allowFullScreen: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        })));\n      }\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport default Chart;\n\nvar RowData = function RowData(_ref) {\n  var id = _ref.id,\n      fields = _ref.fields;\n  return {\n    'KiwibotID': fields['KiwibotID'],\n    'Status': fields['Status'],\n    'Symtoms/Diagnostic': fields['Symtoms/Diagnostic'],\n    'Accountable': fields['Accountable'],\n    'Last Updated': DateConvert(fields['Last Updated']),\n    'Problem': fields['Problem']\n  };\n};\n/**\n * @return {string}\n */\n\n\nfunction DateConvert(dateString) {\n  var newDateString = moment.tz(dateString, \"America/Los_Angeles\").format();\n  return newDateString.slice(0, 4) + \"/\" + newDateString.slice(5, 7) + \"/\" + newDateString.slice(8, 10) + \"  \" + TimeConvert(newDateString.slice(11, 16));\n}\n/**\n * @return {string}\n */\n\n\nfunction TimeConvert(timeString) {\n  var hh = timeString.slice(0, 2);\n  var mm = timeString.slice(3, 5);\n  var dd = \"AM\";\n  var h = hh;\n\n  if (h >= 12) {\n    h = hh - 12;\n    dd = \"PM\";\n  }\n\n  if (h === 0) {\n    h = 12;\n  }\n\n  return h + \":\" + mm + \" \" + dd;\n}","map":{"version":3,"sources":["/Users/gnawleahcim/Documents/kiwi-maintenance/client/src/pages/Chart.js"],"names":["React","Component","SplitPane","Iframe","Airtable","config","BootstrapTable","ToolkitProvider","Search","moment","BrowserView","MobileView","isBrowser","isMobile","base","apiKey","get","linkUrl","SearchBar","ClearSearchButton","columns","dataField","text","sort","headerStyle","colum","colIndex","width","textAlign","classes","callback","cell","row","rowIndex","defaultSorted","order","Chart","props","state","botxreg","maxRegID","newUpdates","forEach","newRecord","botID","select","view","filterByFormula","eachPage","records","fetchNextPage","record","update","err","console","error","setState","push","length","log","setInterval","refresh","map","RowData","searchProps","baseProps","id","fields","DateConvert","dateString","newDateString","tz","format","slice","TimeConvert","timeString","hh","mm","dd","h"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SplitPane from 'react-split-pane';\nimport Iframe from 'react-iframe'\nimport '../index.css';\nimport Airtable from 'airtable';\nimport config from '../config.js';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport moment from \"moment-timezone\";\nimport {\n    // eslint-disable-next-line\n    BrowserView,\n    // eslint-disable-next-line\n    MobileView,\n    // eslint-disable-next-line\n    isBrowser,\n    isMobile\n} from \"react-device-detect\";\n\nconst base = new Airtable({ apiKey: config.get('apiKey')}).base(config.get('baseID'));\nconst linkUrl = \"https://airtable.com/embed/\"+ config.get('url')+ \"?backgroundColor=purple\";\n\nconst { SearchBar, ClearSearchButton } = Search;\n\nconst columns = [{\n    dataField: 'KiwibotID',\n    text: 'Bot #',\n    sort: true,\n    headerStyle: (colum, colIndex) => {\n        return { width: '90px', textAlign: 'center' };\n    }\n}, {\n    dataField: 'Status',\n    text: 'Status',\n    sort: true,\n    headerStyle: (colum, colIndex) => {\n        return { width: '110px', textAlign: 'center' };\n    },\n    classes: function callback(cell, row, rowIndex, colIndex)\n    {\n        \"border-box truncate pill px1 cellToken choiceToken line-height-4 fit mr-half flex-none redBright print-color-exact text-white\"\n    }\n}, {\n    dataField: 'Symtoms/Diagnostic',\n    text: 'Diagnostic',\n    sort: true,\n}, {\n    dataField: 'Accountable',\n    text: 'Accountable',\n    sort: true,\n    headerStyle: (colum, colIndex) => {\n        return { width: '150px', textAlign: 'center' };\n    }\n}, {\n    dataField: 'Last Updated',\n    text: 'Last Updated',\n    sort: true,\n    headerStyle: (colum, colIndex) => {\n        return { width: '190px', textAlign: 'center' };\n    }\n}, {\n    dataField: 'Problem',\n    text: 'Problems',\n    headerStyle: (colum, colIndex) => {\n        return { width: '110px', textAlign: 'center' };\n    }\n}];\n\nconst defaultSorted = [{\n    dataField: 'KiwibotID',\n    order: 'asc'\n}];\n\nclass Chart extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            botxreg: [],\n            maxRegID: 0,\n            newUpdates: []\n        };\n    }\n\n    refresh() {\n        /**\n         * Iterates through the old records that will be replaced by the updates added during\n         * the previous refresh, and updates all of them to match the new updates (regxnovedades).\n         * */\n        this.state.newUpdates.forEach((newRecord) => {\n            let botID = newRecord[\"fields\"][\"KiwibotID\"];\n            base('BOTXREG1').select({\n                view: 'Grid view',\n                filterByFormula: 'KiwibotID = ' + botID\n            }).eachPage(\n                (records, fetchNextPage) => {\n                    records.forEach(function(record) {\n                        /**\n                         * The updating step\n                         * */\n                        base('BOTXREG1').update(record[\"id\"], {\n                            \"KiwibotID\": newRecord[\"fields\"][\"KiwibotID\"],\n                            \"Status\": newRecord[\"fields\"][\"Status\"],\n                            \"Symtoms/Diagnostic\": newRecord[\"fields\"][\"Symtoms/Diagnostic\"],\n                            \"Last Updated\": newRecord[\"fields\"][\"Last Updated\"],\n                            \"Accountable\": newRecord[\"fields\"][\"Accountable\"],\n                            \"PROBLEMS\": newRecord[\"fields\"][\"Problem\"],\n                            \"Active Trigger\": newRecord[\"fields\"][\"ActiveTrigger\"]\n                        }, function(err) {\n                            if (err) { console.error(err); return; }\n                        });\n                    });\n                    fetchNextPage();\n                });\n        });\n\n        /**\n         * Sets the next iteration of newUpdates and maxRegID (state will update by next refresh)\n         * */\n        this.setState({\n            newUpdates: [],\n        });\n\n        base('REGXNOVEDADES').select({\n            view: 'General',\n            filterByFormula: 'REGID >= ' + this.state.maxRegID\n        }).eachPage(\n            (records, fetchNextPage) => {\n                records.forEach((record) => {\n                    this.state.newUpdates.push(record);\n                    this.setState({\n                        maxRegID: record[\"fields\"][\"REGID\"]\n                    });\n                });\n                fetchNextPage();\n            }\n        );\n\n        /**\n         * Regenerates the table : ONLY WORKS FOR <= 100 ROBOTS\n         * */\n        base('BOTXREG1').select({view: 'Grid view'})\n            .eachPage(\n                (records) => {\n                    this.setState ({\n                        botxreg: records\n                    });\n                }\n            );\n    }\n\n    componentWillMount() {\n        /**\n         * Current code only works for each airtable \"page\" (100 elements)\n         *\n         * For more, would have to use:\n         *\n         .eachPage(\n             (records, fetchNextPage) => {\n                 records.forEach((record) => {\n                    this.state.botxreg.push(record)\n                 });\n                 fetchNextPage();\n             }\n         );\n         *\n         * */\n        base('BOTXREG1').select({view: 'Grid view'})\n            .eachPage(\n                (records) => {\n                    this.setState({\n                        botxreg: records\n                    });\n                }\n            );\n\n        base('REGXNOVEDADES').select({\n            view: 'General',\n            filterByFormula: 'REGID > 410'\n        }).eachPage(\n            (records, fetchNextPage) =>  {\n                this.setState({\n                    maxRegID: records[records.length - 1][\"fields\"][\"REGID\"]\n                });\n                fetchNextPage();\n            }\n        );\n        console.log(this.state.maxRegID);\n    }\n\n    componentDidMount() {\n        /** Initializes an interval counter to refresh every timeout milliseconds*/\n        setInterval(() => this.refresh(), 15000);\n    }\n\n    render() {\n        if (isMobile) {\n            return (\n                <Iframe url= {linkUrl}\n                        width=\"100%\"\n                        height=\"800\"\n                        id=\"myId\"\n                        className=\"airtable-embed\"\n                        display=\"initial\"\n                        position=\"relative\"\n                        allowFullScreen/>\n            )\n        } else {\n            return (\n                <SplitPane split=\"vertical\" minSize={800} maxSize={1200} defaultSize={1000} allowResize={true}>\n                    <div className=\"table-wrapper\">\n                        {/** The table and search component */}\n                        <ToolkitProvider\n                            boostrap4\n                            search\n                            keyField=\"id\"\n                            data={ this.state.botxreg.map(record => RowData(record)) }\n                            columns={ columns }\n                            defaultSorted={ defaultSorted }\n                        >\n                            {\n                                props => (\n                                    <div>\n                                        <small>&nbsp;</small>\n                                        <h2><strong>Kiwibot Maintenance Registry</strong></h2>\n                                        <small>&nbsp;</small>\n\n                                        <SearchBar { ...props.searchProps } />\n                                        <ClearSearchButton { ...props.searchProps } />\n\n                                        <hr />\n                                        <BootstrapTable\n                                            { ...props.baseProps }\n                                        />\n                                    </div>\n                                )\n                            }\n                        </ToolkitProvider>\n                    </div>\n                    <div className=\"overlay\">\n                        <Iframe url= {linkUrl}\n                                width=\"100%\"\n                                height=\"800\"\n                                id=\"myId\"\n                                className=\"airtable-embed\"\n                                display=\"initial\"\n                                position=\"relative\"\n                                allowFullScreen/>\n                    </div>\n                </SplitPane>\n            );\n        }\n    }\n}\n\nexport default Chart;\n\nconst RowData = ({id, fields}) => (\n    {\n        'KiwibotID': fields['KiwibotID'],\n        'Status': fields['Status'],\n        'Symtoms/Diagnostic': fields['Symtoms/Diagnostic'],\n        'Accountable': fields['Accountable'],\n        'Last Updated': DateConvert(fields['Last Updated']),\n        'Problem': fields['Problem']\n    }\n);\n\n/**\n * @return {string}\n */\nfunction DateConvert(dateString) {\n    let newDateString = moment.tz(dateString, \"America/Los_Angeles\").format();\n    return newDateString.slice(0, 4) + \"/\"\n        + newDateString.slice(5, 7) + \"/\"\n        + newDateString.slice(8, 10) + \"  \"\n        + TimeConvert(newDateString.slice(11, 16));\n}\n\n/**\n * @return {string}\n */\nfunction TimeConvert(timeString) {\n    const hh = timeString.slice(0, 2);\n    const mm = timeString.slice(3, 5);\n    let dd = \"AM\";\n    let h = hh;\n    if (h >= 12) {\n        h = hh - 12;\n        dd = \"PM\";\n    }\n    if (h === 0) {\n        h = 12;\n    }\n\n    return h + \":\" + mm + \" \" + dd;\n}\n"]},"metadata":{},"sourceType":"module"}